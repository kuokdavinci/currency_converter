// Mocks generated by Mockito 5.4.4 from annotations
// in currency_converter/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:currency_converter/models/currency_model.dart' as _i5;
import 'package:currency_converter/models/rate_model.dart' as _i2;
import 'package:currency_converter/repositories/currency_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRateModel_0 extends _i1.SmartFake implements _i2.RateModel {
  _FakeRateModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CurrencyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyRepository extends _i1.Mock
    implements _i3.CurrencyRepository {
  MockCurrencyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.CurrencyModel>> getAllCurrencies() => (super.noSuchMethod(
        Invocation.method(
          #getAllCurrencies,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.CurrencyModel>>.value(<_i5.CurrencyModel>[]),
      ) as _i4.Future<List<_i5.CurrencyModel>>);

  @override
  _i4.Future<_i2.RateModel> getRates(String? baseCurrency) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRates,
          [baseCurrency],
        ),
        returnValue: _i4.Future<_i2.RateModel>.value(_FakeRateModel_0(
          this,
          Invocation.method(
            #getRates,
            [baseCurrency],
          ),
        )),
      ) as _i4.Future<_i2.RateModel>);
}
